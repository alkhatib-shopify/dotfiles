let mapleader=","

set nocompatible
set nobackup
set nowritebackup
set noswapfile
set history=50
set ruler         " show the cursor position all the time
set showcmd       " display incomplete commands
set noshowmode    " powerline shows the mode
set incsearch     " do incremental searching
set hlsearch      " highlight searches (:noh to turn off)
set ignorecase    " case insensitive searching
set smartcase     " overrides ignorecase when pattern contains caps
set laststatus=2  " Always display the status line
set number        " line numbers
set cursorline    " highlight current line
set winwidth=82   " minimum width for active split
set clipboard=unnamed " use OS clipboard
set encoding=utf-8
set backspace=indent,eol,start
set splitright

" Whitespace stuff
set nowrap
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set shiftround
set list listchars=tab:->,trail:Â·

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
  syntax on
endif

filetype off " required before vundles: http://git.io/ZozZnQ

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
Bundle 'gmarik/vundle'

Bundle 'chriskempson/vim-tomorrow-theme'
Bundle 'croaky/vim-colors-github'
Bundle 'danro/rename.vim'
Bundle 'derekprior/vim-leaders'
Bundle 'derekprior/vim-trimmer'
Bundle 'epmatsw/ag.vim'
Bundle 'kchmck/vim-coffee-script'
Bundle 'kien/ctrlp.vim'
Bundle 'Lokaltog/vim-powerline'
Bundle 'rking/vim-detailed'
Bundle 'scrooloose/syntastic'
Bundle 'thoughtbot/vim-rspec'
Bundle 'tpope/vim-commentary'
Bundle 'tpope/vim-dispatch'
Bundle 'tpope/vim-endwise'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-haml'
Bundle 'tpope/vim-markdown'
Bundle 'tpope/vim-rails'
Bundle 'tpope/vim-rake'
Bundle 'tpope/vim-surround'
Bundle 'vim-ruby/vim-ruby'
Bundle 'vim-scripts/ctags.vim'
Bundle 'xenoterracide/html.vim'

filetype plugin indent on

" jj to switch back to normal mode
inoremap jj <Esc>

augroup vimrcEx
  autocmd!
  "
  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " File Type Settings
  autocmd FileType text setlocal textwidth=78
  autocmd FileType markdown setlocal spell textwidth=80
  autocmd Filetype gitcommit setlocal spell textwidth=72

  " Help System Speedups
  autocmd filetype help nnoremap <buffer><cr> <c-]>
  autocmd filetype help nnoremap <buffer><bs> <c-T>
  autocmd filetype help nnoremap <buffer>q :q<CR>
  autocmd filetype help set nonumber

  " Resize splits when the window is resized
  autocmd VimResized * exe "normal! \<c-w>="

  " hide cursorline and colorcolumn on inactive splits
  autocmd BufWinEnter,WinEnter * setlocal cursorline
  autocmd BufWinLeave,WinLeave * setlocal nocursorline
  autocmd BufWinEnter,WinEnter * setlocal colorcolumn=80
  autocmd BufWinLeave,WinLeave * setlocal colorcolumn=0
augroup END

" Color scheme
set t_Co=256
colorscheme github

" Tab completion
" will insert tab at beginning of line,
" will use completion if not at beginning
set wildmode=list:longest,list:full
set complete=.,w,t
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <Tab> <c-r>=InsertTabWrapper()<cr>

" Exclude Javascript files in :Rtags via rails.vim due to warnings when parsing
let g:Tlist_Ctags_Cmd="ctags --exclude='*.js'"

" Switch between the last two files
nnoremap <leader><leader> <c-^>

" Easy buffer navigation
noremap <C-h>  <C-w>h
noremap <C-j>  <C-w>j
noremap <C-k>  <C-w>k
noremap <C-l>  <C-w>l

" fugitive shortcuts
noremap <leader>gb :Gblame<CR>
noremap <leader>gs :Gstatus<CR>
noremap <leader>gd :Gdiff<CR>
noremap <leader>gp :Git push<CR>

" Treat  <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

" Enable syntastic syntax checking
let g:syntastic_check_on_open=1
let g:syntastic_enable_highlighting=0

" Don't trim trailing whitespace on these filetypes
let g:trimmer_blacklist = ['markdown']

" Typos
command! Q q
command! W w

" ctrl-p - fuzzy file finding
map <leader>f :CtrlP<CR>

" simple vertical splits
map <leader>v <C-w>v

" Mappings for quick search & replace.
" Do a / search first, then leave pattern empty in :s// to use last
" In order, they are `all`, `visual`, `confirm`
map <Leader>sra :%s///<Left>
map <Leader>src :%s///c<Left><Left>

" Hide highlighted terms
map <silent> <leader><cr> :noh<cr>

" vim-rspec mappings
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>
if executable('spring')
  let g:rspec_command = "Dispatch spring rspec {spec}"
else
  let g:rspec_command = "Dispatch rspec {spec}"
endif
